# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."terahdev-web" = {
    image = "ghcr.io/imterah/personal-www:v1.0.4";
    labels = {
      "traefik.http.routers.terahdev.rule" = "Host(`terah.dev`) || Host(`www.terah.dev`)";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=web"
      "--network=terahdev_default"
    ];
  };

  systemd.services."docker-terahdev-web" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-terahdev_default.service"
    ];
    requires = [
      "docker-network-terahdev_default.service"
    ];
    partOf = [
      "docker-compose-terahdev-root.target"
    ];
    wantedBy = [
      "docker-compose-terahdev-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-terahdev_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f terahdev_default";
    };
    script = ''
      docker network inspect terahdev_default || docker network create terahdev_default
    '';
    partOf = ["docker-compose-terahdev-root.target"];
    wantedBy = ["docker-compose-terahdev-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-terahdev-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
