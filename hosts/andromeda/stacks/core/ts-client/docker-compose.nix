# Auto-generated using compose2nix v0.3.1.
{
  config,
  pkgs,
  lib,
  ...
}: {
  imports = [
    ../../../../../system/sops.nix
  ];

  # Containers
  virtualisation.oci-containers.containers."tailscale-tailscale" = {
    image = "tailscale/tailscale:latest";
    environmentFiles = [config.sops.secrets.tailscale_docker_env.path];
    environment = {
      "TS_EXTRA_ARGS" = "--advertise-tags=tag:container --advertise-routes=192.168.0.0/24,192.168.1.0/24,192.168.2.0/24,192.168.3.0/24,192.168.4.0/24 --advertise-exit-node";
      "TS_STATE_DIR" = "/var/lib/tailscale";
      "TS_USERSPACE" = "false";
    };
    volumes = [
      "tailscale_tailscale:/var/lib/tailscale:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=net_admin"
      "--device=/dev/net/tun:/dev/net/tun:rwm"
      "--network-alias=tailscale"
      "--network=tailscale_default"
    ];
  };

  systemd.services."docker-tailscale-tailscale" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-tailscale_default.service"
      "docker-volume-tailscale_tailscale.service"
    ];
    requires = [
      "docker-network-tailscale_default.service"
      "docker-volume-tailscale_tailscale.service"
    ];
    partOf = [
      "docker-compose-tailscale-root.target"
    ];
    wantedBy = [
      "docker-compose-tailscale-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-tailscale_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f tailscale_default";
    };
    script = ''
      docker network inspect tailscale_default || docker network create tailscale_default
    '';
    partOf = ["docker-compose-tailscale-root.target"];
    wantedBy = ["docker-compose-tailscale-root.target"];
  };

  # Volumes
  systemd.services."docker-volume-tailscale_tailscale" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect tailscale_tailscale || docker volume create tailscale_tailscale
    '';
    partOf = ["docker-compose-tailscale-root.target"];
    wantedBy = ["docker-compose-tailscale-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-tailscale-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
